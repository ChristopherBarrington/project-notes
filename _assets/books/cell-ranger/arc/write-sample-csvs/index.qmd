---
title: Create sample configuration CSV files

description: |
  The Cell Ranger ARC configuration file provides sample names, identifiers and paths for FastQ files to quantify.

abstract: |
  Cell Ranger ARC requires an input file that details directories in which FastQ files may be found, an identifier that recursively selects the FastQ files from the directories to analyse and an assay type (gene expression or chromatin accessibility). The information is collated here and written into CSV files for each sample. 

params:
  genomics_root: /nemo/stp/babs/inputs/sequencing/data
  library_metadata: inputs/library-metadata.csv

report:
  inputs summary:
    - Library metadata including sample name and assay
    - FastQ files structured as provided by Genomics STP

  outputs summary:
    - CSV configuration files for use by Cell Ranger ARC

  attachments:
    - inputs/library-metadata.csv
    - outputs/sample-csvs/
---

<!-- load any packages for the workbook -->
```{r load-workbook-packages}
#| cache: false
#| echo: false
#| include: false

library(dplyr)
library(knitr)
library(magrittr)
library(purrr)
library(readr)
library(stringr)
library(usethis)
```

<!-- use the environment template -->
{{< include /_assets/quarto/children/environment.qmd >}}

<!-- collect the `babs` list from _quarto-babs.yaml -->
{{< include /_assets/quarto/children/babs.qmd >}}

<!-- use the inputs/outputs template -->
{{< include /_assets/quarto/children/show_inputs_outputs.qmd >}}

## Provide input data

Input data[^1] required for this script:

1. A delimited file `library-metadata.csv` with "sample", "name" and "assay" variables:
    * __sample__ for Crick projects is the LIMS ID and should uniquely identify FastQ files, eg. BAR0123A1.
    * __name__ is a sensible, directory-safe name for a sample.
    * __assay__ is either "GEX" or "ATAC". This is not accessible from Nemo but can be extracted from the Genomics sample sheet provided by Marg.
1. (optional) A path (`inputs/fastq`) to FastQ files, arranged and named according to Genomics' `data` directory structure: `flow cell/fastq/*.fastq.gz`. For public data, the same structure can be replicated using placeholder names. For Crick projects, the path to `data` can be guessed (and not user-provided) using the `_quarto-babs.yaml` file's values.

[^1]: Input data is provided by the user, and can't be reasonably guessed (or provided) by this report.

```{r write-fastq-symlink}
#| echo: false
#| code-summary: Check for project primary data
#| include: false

local({
	fastq_path <- 'etc/fastq'
	user_provided_fastq <- 'inputs/fastq'

	dirname(fastq_path) |>
		dir.create(recursive=TRUE, showWarnings=FALSE)

	str_glue('rm --force {fastq_path}') |> system()

	if(file.exists(user_provided_fastq)) {
		str_glue('ln --symbolic --relative {user_provided_fastq} {fastq_path}') |> system()
	} else {
		# if there isn't a symlink or directory to use, link to primary_data
		babs |>
			(`[`)(c('lab', 'scientist', 'limsid')) |>
			append(params$genomics_root, after=0) |>
			append('primary_data/') |>
			unname() |>
			do.call(what=file.path) |>
			file.symlink(to=fastq_path)
	}})
```

Cell Ranger ARC [@cellranger; @cellranger_atac] needs to distinguish between the assay types provided for each sample. The user-provided table `inputs/library-to-assay.csv` defines which libraries provide either GEX or ATAC assays for a sample.

```{r show-library-metadata}
#| code-summary: Show library metadata
#| echo: false
#| filename: inputs/library-metadata.csv
#| results: asis

params |>
	pluck('library_metadata') |>
	read_delim() |>
	kable(format='html',
	      table.attr='class="table"',
	      caption=str_glue('Content of library metadata CSV file (`{params$library_metadata}`)'))
```

## Write sample CSV files

The configuration file required by Cell Ranger ARC is a CSV with a path to the FastQ-containing directory, a sample ID that is in the FastQ file name (typically the LIMS ID in our case) and a designation of library type. One configuration file is required for each sample.

```{r show-write-sample-csvs-script}
#| code-summary: Script to write Cell Ranger ARC configuration CSV files
#| eval: false
#| file: scripts/write-sample-csvs.R
#| filename: scripts/write-sample-csvs.R
```

```{bash run-write-sample-csvs-script}
#| code-summary: Run the Rscript to write sample CSVs
#| eval: true
#| results: hide

fastq_path=etc/fastq \
library_metadata=inputs/library-metadata.csv \
outputs=outputs/sample-csvs \
Rscript scripts/write-sample-csvs.R
```

<!-- use the attachments template -->
{{< include /_assets/quarto/children/attachments.qmd >}}
