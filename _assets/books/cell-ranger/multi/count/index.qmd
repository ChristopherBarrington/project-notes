---
title: Demultiplex samples and quantify gene expression

description: |
  Multiple samples are multiplexed into a library which can be separated and quantified using Cell Ranger.

abstract: |
  Cell Ranger multi [@cellranger] will be used to demultiplex samples and quantify gene expression in each sample. The standard per-sample reports are generated as well as per-library reports.

params:
  sbatch:
    value:
      array: default

report:
  inputs summary:
    - Cell Ranger library configuration file(s)

  outputs summary:
    - Quantified matrices
    - Cell Ranger summary reports
    - All Cell Ranger output

  attachments:
    - etc/configs
    - outputs/reports
    - outputs/reports.tar
---

```{r export-params-to-shell}
#| cache: false
#| code-summary: Export parameters to the shell
#| echo: false
#| include: false

local({
	params |> purrr::pluck('sbatch', 'array', .default='default') -> array_spec

	Sys.setenv(array_spec=array_spec)})
```

```{r load-workbook-packages}
#| cache: false
#| code-summary: Load any packages for the workbook
#| echo: false
#| include: false
```

<!-- use the environment template -->
{{< include /_assets/quarto/children/environment.qmd >}}

<!-- collect the `babs` list from _quarto-babs.yaml -->
{{< include /_assets/quarto/children/babs.qmd >}}

<!-- use the inputs/outputs template -->
{{< include /_assets/quarto/children/show_inputs_outputs.qmd >}}

## Provide input data

Input data[^1] required for this script:

1. (optional) `inputs/configs` is a directory of Cell Ranger multi configuration files that will be used for analysis parameters. If not provided, the configuration files output previously will be used.

[^1]: Input data is provided by the user, and (generally) can't be reasonably guessed (or provided) by this report.

```{r check-for-inputs}
#| code-summary: Check for inputs
#| echo: false
#| results: asis

check_input <- function(from, to, default) {
	# get types for `from` and `to`, provides 'directory', 'file', 'symlink' or NA
	fs::file_info(path=c(from, to), follow=FALSE) |>
		dplyr::select(path, type) |>
		dplyr::mutate_all(as.character) |>
		tibble::deframe() -> file_info

	file_info |> purrr::pluck(from) -> from_type
	file_info |> purrr::pluck(to)   -> to_type

	# if the file/directory is missing
	if(is.na(from_type)) {
		# delete an existing symlink, from a previous render
		if(!is.na(to_type) && to_type=='symlink')
			fs::link_delete(to)

		# exit early if no default was provided
		if(missing(default)) {
			c('::: {.callout-important title="Execution stopped!"}',
			  stringr::str_glue('Expected to find `{from}`, and no default was provided!'),
			  ':::') |> cat(sep='\n')
			knitr::knit_exit()
		}

		# warn that we are using the default
		c('::: {.callout-warning}',
		stringr::str_glue('`{from}` was not found, so `{default}` will be linked.'),
		':::') |> cat(sep='\n')

		# update the `from` to be the `default`
		from <- default
	}

	# if `to` is provided, make a symlink between `from` and `to`
	if(!missing(to)) {
		to |> dirname() |> dir.create(recursive=TRUE, showWarnings=FALSE)
		file.symlink(from=from, to=to)
	}

	# invisibly return nothing
	invisible(TRUE)
}

## ---- inputs/configs

file.path('../..', 'write-configuration-files', 'outputs/configs') |>
	check_input(from='inputs/configs', to='etc/configs')
```

## Demultiplex and quantify samples

Each library [configuration file] in the `configs` directory is used to provide the parameters required by Cell Ranger multi. A slurm array of jobs, one for each library, is submitted to Nemo.

The array specification provided to the `sbatch` is: ``r Sys.getenv('array_spec', unset='missing')``.

[configuration file]: https://www.10xgenomics.com/support/software/cell-ranger/latest/analysis/inputs/cr-multi-config-csv-opts

```{r show-count-script}
#| code-summary: Script to run Cell Ranger multi with a library configuration file
#| eval: false
#| file: bin/count.sbatch
#| filename: bin/count.sbatch
```

```{bash run-count-script}
#| code-summary: Submit the `bash` script to demultiplex and quantify libraries
#| eval: true
#| results: hide

if [[ $array_spec == default ]]; then
	array_spec=1-`ls etc/configs/ | wc --lines`
fi

OUTPUTS=outputs/multi \
sbatch \
--array $array_spec \
--output logs/%A_%a.out \
--wait \
bin/count.sbatch `ls --directory etc/configs/*`
```

<!-- use the attachments template -->
{{< include /_assets/quarto/children/attachments.qmd >}}
