---
title: Quantify gene expression and chromatin accessibility

description: |
  Analysis of FastQ files produce quantified matrices for analysis and Loupe files for visualisation.

abstract: |
  Each dataset will be analysed using Cell Ranger ARC to quantify the gene expression and chromatin accessibility assays. Both assays will be used to jointly call cells; GEMs that are identified as cells should have a sufficiently high amount of gene expression and chromatin accessibility data.

params:
  submit_to_slurm: false

report:
  inputs summary:
      - Reference genome index
      - Cell Ranger ARC sample CSVs

  outputs summary:
      - Quantified matrices
      - Cell Ranger ARC summary reports
      - All Cell Ranger ARC output

  attachments:
      - etc/sample-csvs
      - outputs/reports
      - outputs/reports.tar
---

<!-- load any packages for the workbook -->
```{r load-workbook-packages}
#| cache: false
#| echo: false
#| include: false

library(fs)
library(knitr)
library(magrittr)
library(purrr)
```

<!-- use the environment template -->
{{< include /_assets/includes/environment.qmd >}}

<!-- collect the `babs` list from _quarto-babs.yaml -->
{{< include /_assets/includes/babs.qmd >}}

<!-- use the inputs/outputs template -->
{{< include /_assets/includes/show_inputs_outputs.qmd >}}

<!-- end of initial set up chunks -->

## Provide input data

Input data[^1] required for this script:

1. A Cell Ranger ARC index at `inputs/reference`. This can be a symlink to the index. There is a reference area on Nemo (`/flask/reference/Genomics/10x/10x_arc`) where 10x-provided GRCh38 and mm10 are available. Alternatively, this can be provided (and possibly symlinked) after preparation by `cellranger arc mkref`.
1. Cell Ranger ARC configuration files. These can be automatically linked from the previous chapter in which the files were created. Otherwise, these are CSVs named as the sample name with FastQ file paths, library names and assay types as described by [10x]. The files should be in the `inputs/sample-csvs` directory.

[^1]: Input data is provided by the user, and can't be reasonably guessed (or provided) by this report.

[10x]: https://www.10xgenomics.com/support/software/cell-ranger-arc/latest/analysis/running-pipelines/single-library-analysis#create-a-libraries-csv-file

```{r check-for-inputs}
#| code-summary: Check for report inputs
#| echo: false
#| results: asis

## ---- inputs/sample-csvs

if(dir.exists('inputs/sample-csvs')) {
	file.symlink(from='../inputs/sample-csvs', to='etc/sample-csvs')
} else {
	if(is_link('etc/sample-csvs'))
		link_delete('etc/sample-csvs')
	file.symlink(from='../../write-sample-csvs/outputs/sample-csvs/', to='etc/sample-csvs')
	c('::: {.callout-warning}',
	  'The `inputs/sample-csvs` directory was not found, a link was created from `../write-sample-csvs/outputs/sample-csvs`.',
	  ':::') |> cat(sep='\n')
}

## ---- inputs/reference

if(file.exists('inputs/reference') |> not()) {
	c('::: {.callout-important title="Execution stopped!"}',
	  'A Cell Ranger ARC index was not found at `inputs/reference`. This can be an index or a symlink to an index.',
	  ':::') |> cat(sep='\n')
	knit_exit()
}
```

## Cell Ranger ARC count

This `bash` script is used to run [Cell Ranger ARC] [@cellranger; @cellranger_atac]. It should be distributed and run in parallel, one job for each dataset.

[Cell Ranger ARC]: https://www.10xgenomics.com/support/software/cell-ranger-arc/latest/algorithms-overview/algorithms-overview

### Slurm job array script

The configuration files are required to provide the sample name and configuration for Cell Ranger ARC. Each configuration file is used independently.

The Slurm sbatch script expects environment variables providing paths to the:

* __`REFERENCE`__ a path or symlink to a Cell Ranger ARC index. Symlinks will be converted to real paths for clarity in the reports.
* __`OUTPUTS`__ root output directory.

```{r setup-read-script-by-chunks}
#| cache: false
#| include: false

read_chunk('scripts/submit.sbatch')
```

```{bash run-cell-ranger-arc-count}
#| code-fold: false
#| code-summary: Command to run Cell Ranger ARC count
#| eval: false
#| filename: Snippet of scripts/submit.sbatch
```

The complete script can be viewed in the following code chunk.

```{bash show-count-script}
#| code-summary: Slurm sbatch script to run Cell Ranger ARC count
#| eval: false
#| file: scripts/submit.sbatch
#| filename: scripts/submit.sbatch
```

### Distribute analysis

The analyses are distributed across Nemo using a Slurm job array, one job per sample (or sample configuration CSV). An archive of Cell Ranger reports (gene expression, ATAC and ARC) is created once the job array has completed.

```{r export-variables-to-environment}
#| echo: false
#| eval: false

Sys.setenv(reference='inputs/reference',
	   outputs='outputs')
```

```{bash submit-to-slurm}
#| code-summary: Submit script to Slurm
#| eval: !expr params$submit_to_slurm
#| filename: bash

mkdir --parents logs

n_samples=`ls etc/sample-csvs/ | wc --lines`

REFERENCE=$reference \
OUTPUTS=$outputs \
sbatch \
--array 1-$n_samples \
--output logs/%A_%a.out \
--wait \
scripts/submit.sbatch \
`ls --directory etc/sample-csvs/*`

tar \
--create \
--file $outputs/reports.tar \
--directory $outputs \
reports
```

```{r show-submit-to-slurm-callout}
#| code-summary: Inform on whether the sbatch was submitted
#| echo: false
#| results: asis

params |>
	pluck('submit_to_slurm') |>
	as.character() |>
	switch(`TRUE`='The sbatch script was submitted to Slurm via `quarto render`',
	       `FALSE`='The sbatch script __was not__ submitted to Slurm by the most recent `quarto render`! To submit the array, provide `params.submit_to_slurm: true`') |>
	append('::: {.callout-note title="Cell Ranger ARC execution"}', after=0) |>
	append(':::') |>
	cat(sep='\n')
```

<!-- use the attachments template -->
{{< include /_assets/includes/attachments.qmd >}}
