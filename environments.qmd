---
execute:
  keep-md: false
format:
  html:
    toc: false
uses:
  conda: false
  renv: true
---

# Environments {.appendix .unnumbered}

```{r provide-yaml-engine}
#| cache: false
#| echo: false

# write a generic chunk
formatted_text_engine <- function(options, language='plain') {
	options |> purrr::pluck('code-fold', .default='false') -> code_fold
	options |> purrr::pluck('code-summary', .default='Code') -> code_summary
	chunk_def <- sprintf(fmt='```{.%s .cell-code code-fold="%s" code-summary="%s"}\n', language, code_fold, code_summary)
	options |> purrr::pluck('code') |> sprintf(fmt='%s\n') |> (\(x) c(chunk_def, x, '```\n'))()
}

# write a yaml chunk
yaml_engine <- function(options)
	formatted_text_engine(options=options, language='yaml')

# write a json chunk
json_engine <- function(options)
	formatted_text_engine(options=options, language='json')

# provide the above engines
knitr::knit_engines$set(yaml=yaml_engine, json=json_engine)
```

::: {.content-visible when-meta="uses.conda"}

[conda home]: https://docs.conda.io/en/latest/

```{bash write-conda-recipe}
#| cache: false
#| include: false

mkdir --parents files \
&& conda env export \
| grep --invert '^prefix: ' \
> files/conda.yaml
```

## Conda environment

{{< fa paperclip >}} [conda.yaml](files/conda.yaml)

A [`conda`][conda home] environment was used with this project. [Download](files/conda.yaml) the environment file and use a command similar to the following to reinstall all of the packages.

```{bash show-example-conda-create}
#| cache: false
#| eval: false
#| code-fold: false
#| filename: Create a conda environment from an environment file

conda create --name environment --file conda.yaml
```

```{yaml show-conda-environment}
#| cache: false
#| code-fold: true
#| code-summary: Reveal the conda environment
#| file: files/conda.yaml
#| filename: conda.yaml
```
:::

::: {.content-visible when-meta="uses.renv"}

[renv home]: https://rstudio.github.io/renv/

```{r write-renv-snapshot}
#| cache: false
#| include: false

path <- 'files'
dir.create(path=path, showWarnings=FALSE)
renv::snapshot(lockfile=file.path(path, 'renv.lock'), type='all')
```

## Reproducible R environment

{{< fa paperclip >}} [renv.lock](files/renv.lock)

R packages were managed in this project using [`renv`][renv home]. A `lockfile` can be used by `renv` to install the version-matched R packages used in the project.

[Download](files/renv.lock) the lockfile for the project to an empty directory. Start R version `r jsonlite::read_json('files/renv.lock')$R$Version` and use `renv::init()` to initialise a new renv-managed project. [The major/minor version is important but a different patch version _should_ still work.]{.aside}
:::
