---
title: Get a Cell Ranger reference index

description: |
  A reference index is required against which a dataset can be quantified. If not already available, one can be created with Cell Ranger.

abstract: |
  10x provides Cell Ranger [@cellranger] [reference gene expression indexes](https://www.10xgenomics.com/support/software/cell-ranger/downloads#reference-downloads) for mouse and human. We can create a new barnyard reference for a mixed-species analysis, a mixed genome to include an exogenous gene for example, or for a species without an existing index available using Cell Ranger [mkref](https://www.10xgenomics.com/support/software/cell-ranger/latest/tutorials/cr-tutorial-mr).

params:
  custom genome:
    value:
      name: my_genome
      version: v1
  cell ranger module: CellRanger/8.0.0

report:
  inputs summary:
    - Either:
      - Genome files:
        - FastA
        - GTF
    - Or a link to an existing reference index
  outputs summary:
    - Cell Ranger reference index

  attachments:
    - logs/mkref.log
---

```{r export-params-to-shell}
#| cache: false
#| code-summary: Export parameters to the shell
#| echo: false
#| include: false

local({
	params |>
		purrr::pluck('custom genome', 'name', .default='custom_genome') ->  custom_genome_name

	params |>
		purrr::pluck('custom genome', 'version', .default='version0') -> custom_genome_version

	params |>
		purrr::pluck('cell ranger module', .default='CellRanger/8.0.0') -> cell_ranger_module

	Sys.setenv(custom_genome_name=custom_genome_name,
	           custom_genome_version=custom_genome_version,
		   cell_ranger_module=cell_ranger_module)
})
```

```{r load-workbook-packages}
#| cache: false
#| code-summary: Load any packages for the workbook
#| echo: false
#| include: false

library(fs)
library(stringr)
```

<!-- use the environment template -->
{{< include /_assets/quarto/children/environment.qmd >}}

<!-- collect the `babs` list from _quarto-babs.yaml -->
{{< include /_assets/quarto/children/babs.qmd >}}

<!-- use the inputs/outputs template -->
{{< include /_assets/quarto/children/show_inputs_outputs.qmd >}}

## Provide input data

Input data[^1] required for this script:

1. For a custom genome, both:
    * `inputs/dna` is a directory of gzipped FastA files that will be concatenated together in asciibetical order.
    * `inputs/features` should contain the GTF files that will be similarly concatenated.
1. Or if a reference exists, `inputs/reference` could be a symlink to a Cell Ranger reference index.
1. `params:custom genome:name` is the directory-safe name of a newly created genome. This can be omitted if a reference is provided.
1. `params:custom genome:version` a version string for the newly created genome that is provided as the `--ref-version` argument. This can be omitted if a reference is provided.
1. `params:cell ranger version` is the module that provide Cell Ranger. If not provided, the default 'CellRanger/8.0.0' is used.

[^1]: Input data is generally provided by the user, some default values may be guessed.

```{r check-for-inputs}
#| code-summary: Check for inputs
#| echo: false
#| results: asis

### ---- inputs/dna

from <- 'inputs/dna'

if(! dir.exists(from) && ! dir.exists('outputs/reference')) {
	c('::: {.callout-important title="Execution stopped!"}',
	  'DNA inputs not found at `inputs/dna`!',
	  ':::') |> cat(sep='\n')

	list.files(path=from) |>
		str_detect(pattern='.{fa,fasta}.gz$') -> n_files
	
	if(n_files < 2)
		c('::: {.callout-important title="Execution stopped!"}',
		  'DNA inputs should be two or more gzipped fasta files with `<.fa|.fasta>.gz` extension!',
		  ':::') |> cat(sep='\n')

	knit_exit()
}

### ---- inputs/features

from <- 'inputs/features'

if(! dir.exists(from) && ! dir.exists('outputs/reference')) {
	c('::: {.callout-important title="Execution stopped!"}',
	  'Genomic feature inputs not found at `inputs/features`!',
	  ':::') |> cat(sep='\n')

	list.files(path=from) |>
		str_detect(pattern='.gtf$') -> n_files
	
	if(n_files < 2)
		c('::: {.callout-important title="Execution stopped!"}',
		  'Genomic feature inputs should be two or more files with a `.gtf` extension!',
		  ':::') |> cat(sep='\n')

	knit_exit()
}
```

```{r get-content-visibility-toggle}
#| code-summary: Get boolean to determine mkref execution
#| echo: false

reference_is_provided <- dir.exists('inputs/reference')
reference_is_missing  <- !reference_is_provided
```

:::{`r if(reference_is_provided) {'.content-visible'} else {'.content-hidden'}`}

## Link to provided reference

A Cell Ranger index was provided and will be symlinked into `outputs/reference`.

```{bash link-reference-input-to-output}
#| code-summary: Make symlink between reference input and output
#| echo: false
#| eval: !expr reference_is_provided

mkdir --parents outputs \
&& rm --force $_/reference \
&& ln --symbolic --relative --no-dereference inputs/reference $_
```

::: {.callout-tip}
The output reference is a link to:

``r if(reference_is_provided) system('readlink --canonicalize-existing outputs/reference', intern=TRUE)``
:::

:::

:::{`r if(reference_is_missing) {'.content-visible'} else {'.content-hidden'}`}

## Create a new reference index

The FastA and GTF files will be concatenated and used to create a new Cell Ranger index using the ``r params[['cell ranger module']]`` module.

```{bash show-mkref-script}
#| code-summary: Create custom Cell Ranger index
#| eval: false
#| file: bin/mkref.sh
#| filename: bin/mkref.sh
```

```{bash submit-mkref-script}
#| code-summary: Submit the `bash` script to create a new reference index
#| eval: !expr reference_is_missing
#| results: hide

mkdir --parents logs

CELL_RANGER_MODULE=$cell_ranger_module \
GENOME=$custom_genome_name \
VERSION=$custom_genome_version \
bash bin/mkref.sh > logs/mkref.log

# sbatch \
# --output logs/mkref.log \
# --wait \
# bin/mkref.sh
```

:::

<!-- use the attachments template -->
{{< include /_assets/quarto/children/attachments.qmd >}}
